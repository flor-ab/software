---
title: "Entrega grupal"
title-slide-attributes:
  data-background-image: "imagen.png"
  data-background-size: "cover"
  data-background-opacity: "0.5"
  data-background-color: "#f0f0f0"
author: "Eli, Jazmín, Shengnan, Flor, Mariajo"
format:
  revealjs:
    transition: "fade"
    logo: "logo-estad-2.png"
    logo-width: "300px"
    footer: "Bioestadística UCM"
    theme: ["style.scss"]
    embed-resources: true
    menu:
      side: right
      width: wide
execute:
  echo: true
---

### Paquetes necesarios

```{r}
#| code-fold: true
rm(list = ls())
library(tidyverse)
library(glue)
library(forcats)
library(lubridate)
library(waffle)
library(ggpol)
library(ggforce)
library(sf) # para importar archivos shapefiles
library(broom) # Para transformar los archivos shapefiles 
library(gridExtra)
library(grid)
library(gganimate)
```

---

### Datos empleados

```{r}
#| code-fold: true
#| eval: false
shapefile_provincias <- st_read("./data/archivomapa/Provincias_ETRS89_30N.shp")
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./data/cod_mun.csv")
surveys <- read_csv(file = "./data/historical_surveys.csv")
abbrev <- read_csv(file = "./data/siglas.csv")
escannos_provincia_anno <- read_csv("data/escannos_provincia_anno.csv")
```

---

# Parte 1: Depuración de datos {.panel-tabset}

Debes trabajar únicamente en el **período de tiempo que incluye las elecciones desde 2008 hasta las últimas elecciones de 2019**

Solo nos interesarán los siguientes partidos:
- PARTIDO SOCIALISTA OBRERO ESPAÑOL
- PARTIDO POPULAR
- CIUDADANOS
- PARTIDO NACIONALISTA VASCO
- BLOQUE NACIONALISTA GALLEGO
- UNIDAS PODEMOS - IU (Unidas Podemos, Unidos Podemos, Podemos, IU, Podem, y Ezker Batua).
- ESQUERRA REPUBLICANA DE CATALUNYA
- EH - BILDU (ahora son una coalición de partidos formada por lo que antes era Sortu, Eusko Alkartasuna, Aralar, Alternatiba).
- VOX

Todo lo que no esté en alguno de los anteriores partidos debe ser correctamente reagrupado (y resumido) en `OTROS`

---


## Convertir a tidy data 

```{r}
#| code-fold: true

#Convertir a tidy data
eleccion_tidy <- 
  election_data |> 
  pivot_longer(cols = c(16:471), 
               names_to = "partido", 
               values_to = "votos", 
               values_drop_na = TRUE)

eleccion_tidy |> 
  distinct(codigo_distrito_electoral) #Sólo está el 0
eleccion_tidy |> 
  distinct(vuelta) #Sólo vuelta 1 
eleccion_tidy |> 
  distinct(tipo_eleccion) #Sólo tipo 02 --> nacionales
eleccion_tidy |> 
  distinct(anno, mes) #Hubo 6 elecciones : 2008,2011,2015,2016,2019 (abril) y 2019 (noviembre)

```


---


## Depuración nombres de partidos 

```{r} 
#Depuración nombres de partidos
nombres_partidos <- c("PARTIDO SOCIALISTA OBRERO ESPAÑOL","PARTIDO POPULAR", "CIUDADANOS", "PARTIDO NACIONALISTA VASCO", "BLOQUE NACIONALISTA GALLEGO", "UNIDAS PODEMOS - IU", "ESQUERRA REPUBLICANA DE CATALUNYA",  "EH - BILDU", "VOX")

cambia_nombres <- function(partido, nombres) {
  partido_min <- str_to_lower(partido)
  nombres_min <- str_to_lower(nombres)
  
  if (str_detect(partido_min, "\\bsortu\\b|\\beusko alkartasuna\\b|\\baralar\\b|\\balternatiba\\b|\\beuskal herria bildu\\b")) { 
    #Añado el nombre completo de EH - Bildu y cambio a str_detect porque antes no captaba todo lo que debía (ej 2008, Victoria-Gasteiz EZKER BATUA-BERDEAK-ALTERNATIVA)
    return("EH - BILDU")
  }
  
   if (str_detect(partido_min, "\\bunidas podemos\\b|\\bunidos podemos\\b|\\bpodemos\\b|\\biu\\b|\\bpodem\\b|\\bezker batua\\b")) {
    return("UNIDAS PODEMOS - IU")
  }
  
  if (str_detect(partido_min,"\\bpartido nacionalista vasco\\b")) {
    return("PARTIDO NACIONALISTA VASCO")
  }
  
  if (str_detect(partido_min,"\\bpsoe\\b|\\bpartido socialista obrero español\\b\\bpartido socialista de euskadi\\b|\\bpartit dels socialistes de catalunya\\b|\\bpartido dos socialistas de galicia\\b")) {
    return("PARTIDO SOCIALISTA OBRERO ESPAÑOL")
  }
  
    if (str_detect(partido_min,"\\bpp\\b|\\bpartido popular\\b")) {
    return("PARTIDO POPULAR")
    }
  
  if (str_detect(partido_min,"\\bbloque nacionalista galego\\b")) {
    return("BLOQUE NACIONALISTA GALLEGO")  
  }
  
  if (str_detect(partido_min,"\\bpartido de la ciudadanía\\b|\\bpartido de la ciudadania\\b")) {
    return("CIUDADANOS")  
  }
  
  if (str_detect(partido_min,"\\besquerra republicana de catalunya\\b")) { #Nótese que quedan aún partidos tipo coalición (considero que deberían incluirse)
    return("ESQUERRA REPUBLICANA DE CATALUNYA")  
  }
  
  if (any(partido_min == nombres_min)) {
    return(partido)  
  }
  
  return("OTRO")
}

cambia_nombres("PARTIDO MINERO POPULAR", nombres_partidos) #ejemplo
cambia_nombres("PARTIT POPUPLR-PARTIDO POPULAR", nombres_partidos) #ejemplo
cambia_nombres("CIUDADANOS-PARTIDO DE LA CIUDADANÍA", nombres_partidos) #ver que antes no captaba 

#Aplicar función al dataframe
eleccion_tidy_filt <- 
  eleccion_tidy |> 
  rowwise() |> 
  mutate(partido_n = cambia_nombres(partido, nombres_partidos))

#Reagrupar partido "otro"
eleccion_resumen <- 
  eleccion_tidy_filt |>
  group_by(partido_n,anno,mes,codigo_ccaa,codigo_provincia,codigo_municipio) |> 
  mutate(votos_totales_partido = sum(votos)) |> 
  ungroup() # Ver anotaciones del cambio

```

---


### Encuestas

Debes descartar las encuestas que:

    -   se refieran a elecciones anteriores a 2008
    -   sean a pie de urna
    -   tamaño muestral desconocido o inferior a 500.
    -   tenga 1 día o menos de trabajo de campo.

```{r}
#| code-fold: true

surveys_tidy <- 
  surveys |> 
  pivot_longer(cols = c(11:59), 
               names_to = "partidos", 
               values_to = "intencion_voto", 
               values_drop_na = TRUE) |>
  drop_na(size) |>  
  filter(size >=500 & exit_poll == FALSE) |>   #tamaño muestral y a pie de urna
  filter(date_elec >= "2008-01-01") |>  #elecciones desde 2008
  mutate(duracion_t_campo = field_date_to - field_date_from) |> 
  filter(duracion_t_campo > 1) |> #descartar enucentas con 1 días o menos de trabajo de campo
  select(-exit_poll) |>  #quitar var. a pie de urna porque no es informativa (sólo quedan las que no lo)
  mutate(siglas = case_when(
            partidos == "PSOE" ~ "PSOE",
            partidos == "PP" ~ "PP",
            partidos == "CC" ~ "C's",
            partidos == "BNG" ~ "BNG",
            partidos == "ERC" ~ "ERC",
            partidos == "IU" ~ "PODEMOS-IU",
            partidos == "UP" ~ "PODEMOS-IU",
            partidos == "PODEMOS" ~ "PODEMOS-IU",
            partidos == "EH-BILDU" ~ "EH-BILDU",
            partidos == "EAJ-PNV" ~ "PNV",
            partidos == "VOX" ~ "VOX",
            TRUE ~ "OTRO" ))


```


---


## Resumen de información

```{r}
#| code-fold: true
# Tabla maestra que contiene nombres de municipios, sus códigos y las siglas de cada partido (para facilitar la visualización)

abbrev_modif <- abbrev|> 
  rowwise() |> 
  mutate(partidos = cambia_nombres(denominacion, nombres_partidos)) |> 
  select(-denominacion) |> 
  distinct(partidos, .keep_all = TRUE) |> 
  mutate(siglas = case_when(
    partidos == "PARTIDO NACIONALISTA VASCO"  ~ "PNV",
    partidos == "PARTIDO SOCIALISTA OBRERO ESPAÑOL"  ~ "PSOE",
    partidos == "UNIDAS PODEMOS - IU" ~ "PODEMOS-IU",
    partidos == "EH - BILDU" ~ "EH-BILDU",
    partidos == "OTRO"  ~ "OTRO",
    TRUE ~ siglas))

tabla_maestra <-
  eleccion_resumen |> 
  unite(col = "cod_poblacion", codigo_ccaa, codigo_provincia, codigo_municipio, sep = "-", remove = FALSE) |> 
  left_join(cod_mun, by =  c("cod_poblacion" = "cod_mun")) |> 
  select(-c(tipo_eleccion,vuelta)) |> 
  left_join(abbrev_modif, by = c("partido_n" = "partidos"))


```



---



## Parte 3

```{r}
#| code-fold: true
tabla_pg4 <- 
  tabla_maestra |>
  # Votos totales por población
  group_by(anno, mes, codigo_ccaa, codigo_provincia, codigo_municipio, cod_poblacion) |>
  summarise(votos_totales = sum(votos)) |>
  distinct(anno, codigo_ccaa, codigo_provincia, codigo_municipio, cod_poblacion, votos_totales)

tabla_pg4_censo <-
  tabla_maestra |> 
  distinct(anno, mes, codigo_ccaa, codigo_provincia, codigo_municipio, cod_poblacion, censo)

tabla_pg4_censoxvotos <-
  left_join(x = tabla_pg4_censo, 
            y = tabla_pg4, 
            by = c("anno" = "anno", 
                   "mes" = "mes",
                   "codigo_ccaa" = "codigo_ccaa",
                   "codigo_provincia" = "codigo_provincia",
                   "codigo_municipio" = "codigo_municipio",
                   "cod_poblacion" = "cod_poblacion")) |> 
  group_by(anno, mes, codigo_ccaa) |> 
  summarise(censo_tot = sum(censo), votos_tot = sum(votos_totales)) |> 
  mutate(
    porc = votos_tot / censo_tot,
    comunidad_autonoma = case_when(
      codigo_ccaa == "01" ~ "Andalucia",
      codigo_ccaa == "02" ~ "Aragon",
      codigo_ccaa == "03" ~ "Asturias",
      codigo_ccaa == "04" ~ "Baleares",
      codigo_ccaa == "05" ~ "Canarias",
      codigo_ccaa == "06" ~ "Cantabria",
      codigo_ccaa == "07" ~ "Castilla y Leon",
      codigo_ccaa == "08" ~ "Castilla La Mancha",
      codigo_ccaa == "09" ~ "Cataluña",
      codigo_ccaa == "10" ~ "Comunidad Valenciana",
      codigo_ccaa == "11" ~ "Extremadura",
      codigo_ccaa == "12" ~ "Galicia",
      codigo_ccaa == "13" ~ "Comunidad de Madrid",
      codigo_ccaa == "14" ~ "Murcia",
      codigo_ccaa == "15" ~ "Navarra",
      codigo_ccaa == "16" ~ "País Vasco",
      codigo_ccaa == "17" ~ "La Rioja",
      codigo_ccaa == "18" ~ "Ceuta",
      TRUE ~ "Melilla"
    )
  )

# Graficar los datos
ggplot(tabla_pg4_censoxvotos) +
  geom_line(aes(x = anno, y = porc, color = comunidad_autonoma), size = 0.7, alpha = 0.8) +
  scale_x_continuous(
    breaks = seq(2007, 2020, by = 1), 
    labels = seq(2007, 2020, by = 1)
  ) +
  scale_color_viridis_d() + 
  labs(
    title = "Relación entre Votos Totales y Censo Total por Comunidad Autónoma",
    x = "Año",
    y = "Porcentaje de Votos sobre Censo",
    color = "Comunidad Autónoma"
  ) +
  theme_minimal() +
  theme(
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 9)
  )


#Se observa como el porcentaje de votos respecto al censo fue disminuyendo alrededor del 2015 para la mayoría de comunidades, seguido de una recuperacíon en los años posteriores (hacia 2017-2018).

#Las comunidades tienen diferentes niveles de participación. Algunas mantienen un porcentaje más alto (cerca del 80%), mientras que otras caen a valores significativamente más bajos (alrededor del 50% en algunos años).


```


---


### Parte 3: Evolución del Porcentaje de Voto en Relación al Censo por Comunidad Autónoma

```{r}
#| code-fold: true
# Crear tabla con votos totales por población
tabla_pg4 <- 
  tabla_maestra |>
  group_by(anno, mes, codigo_ccaa, codigo_provincia, codigo_municipio, cod_poblacion) |>
  summarise(votos_totales = sum(votos)) |>
  distinct(anno, codigo_ccaa, codigo_provincia, codigo_municipio, cod_poblacion, votos_totales)

# Crear tabla con el censo
tabla_pg4_censo <- 
  tabla_maestra |> 
  distinct(anno, mes, codigo_ccaa, codigo_provincia, codigo_municipio, cod_poblacion, censo)

# Unir las dos tablas y calcular porcentaje de votos sobre censo
tabla_pg4_censoxvotos <- 
  left_join(x = tabla_pg4_censo, 
            y = tabla_pg4, 
            by = c("anno" = "anno", 
                   "mes" = "mes",
                   "codigo_ccaa" = "codigo_ccaa",
                   "codigo_provincia" = "codigo_provincia",
                   "codigo_municipio" = "codigo_municipio",
                   "cod_poblacion" = "cod_poblacion")) |> 
  group_by(anno, mes, codigo_ccaa) |> 
  summarise(censo_tot = sum(censo), votos_tot = sum(votos_totales)) |> 
  mutate(porc = votos_tot / censo_tot,
         comunidad_autonoma = case_when(
           codigo_ccaa == "01" ~ "Andalucia",
           codigo_ccaa == "02" ~ "Aragon",
           codigo_ccaa == "03" ~ "Asturias",
           codigo_ccaa == "04" ~ "Baleares",
           codigo_ccaa == "05" ~ "Canarias",
           codigo_ccaa == "06" ~ "Cantabria",
           codigo_ccaa == "07" ~ "Cast y Leon",
           codigo_ccaa == "08" ~ "Cast La Mancha",
           codigo_ccaa == "09" ~ "Catalunya",
           codigo_ccaa == "10" ~ "Com Valenciana",
           codigo_ccaa == "11" ~ "Extremadura",
           codigo_ccaa == "12" ~ "Galicia",
           codigo_ccaa == "13" ~ "Com de Madrid",
           codigo_ccaa == "14" ~ "Murcia",
           codigo_ccaa == "15" ~ "Navarra",
           codigo_ccaa == "16" ~ "Pais Vasco",
           codigo_ccaa == "17" ~ "La Rioja",
           codigo_ccaa == "18" ~ "Ceuta",
           TRUE ~ "Melilla"
         ),
      fecha = as.Date(paste(anno, mes, "01", sep = "-"))) |> 
  group_by(codigo_ccaa) |> 
  mutate(mean_porc = mean(porc),
         tipos_ccaa = case_when(
           mean_porc > 0.74 ~ "Porc > 0.73",
           mean_porc > 0.71 ~ "Porc > 0.71 y < 0.73",
           mean_porc > 0.65 ~ "Porc > 0.65 y < 0.71",
           TRUE ~ "Porc <= 0.65"
         ))

# Graficar los datos

grafica_menos65 <- 
  ggplot(tabla_pg4_censoxvotos |>  
           filter(tipos_ccaa == "Porc <= 0.65")) +
  geom_line(aes(x = fecha, y = porc, color = comunidad_autonoma), size = 1, alpha = 0.8) +  
  scale_x_date(
    breaks = as.Date(c("2008-01-01", "2011-01-01", "2015-01-01", "2016-01-01", "2018-01-01", "2019-01-01")),
    labels = c("2008", "2011", "2015", "2016", "2018", "2019")  
  ) +
  scale_y_continuous(
    labels = function(porc) paste0(porc * 100, "%")        
  ) +
  scale_color_viridis_d() +  
  labs(
    color = "Porcentaje de voto",
    subtitle = "Porcentaje <= 0.65"
  ) +  
  theme_minimal() +
  theme(
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 9),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.text.x = element_text(angle = 80, size = 7),
    strip.text = element_text(face = "bold", size = 4.5),
    plot.title = element_text(face = "bold", hjust = 0.5, margin = margin(b = 10)),
    panel.grid = element_blank()
  )

# Gráfica para el porcentaje entre 0.65 y 0.71
grafica_menos71 <- 
  ggplot(tabla_pg4_censoxvotos |>  
           filter(tipos_ccaa == "Porc > 0.65 y < 0.71")) +
  geom_line(aes(x = fecha, y = porc, color = comunidad_autonoma), size = 1, alpha = 0.8) +  
  scale_x_date(
    breaks = as.Date(c("2008-01-01", "2011-01-01", "2015-01-01", "2016-01-01", "2018-01-01", "2019-01-01")),
    labels = c("2008", "2011", "2015", "2016", "2018", "2019")  
  ) +
  scale_y_continuous(
    labels = function(porc) paste0(porc * 100, "%")        
  ) +
  scale_color_viridis_d() +  
  labs(
    color = "Porcentaje de voto",
    subtitle = "Porcentaje entre 0.65 y 0.71"
  ) +  
  theme_minimal() +
  theme(
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 9),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.text.x = element_text(angle = 80, size = 7),
    strip.text = element_text(face = "bold", size = 4.5),
    plot.title = element_text(face = "bold", hjust = 0.5, margin = margin(b = 10)),
    panel.grid = element_blank()
  )

# Gráfica para el porcentaje entre 0.71 y 0.73
grafica_menos73 <- 
  ggplot(tabla_pg4_censoxvotos |>  
           filter(tipos_ccaa == "Porc > 0.71 y < 0.73")) +
  geom_line(aes(x = fecha, y = porc, color = comunidad_autonoma), size = 1, alpha = 0.8) +   
  scale_x_date(
    breaks = as.Date(c("2008-01-01", "2011-01-01", "2015-01-01", "2016-01-01", "2018-01-01", "2019-01-01")),
    labels = c("2008", "2011", "2015", "2016", "2018", "2019")  
  ) +
  scale_y_continuous(
    labels = function(porc) paste0(porc * 100, "%")        
  ) +
  scale_color_viridis_d() +  
  labs(
    color = "Porcentaje de voto",
    subtitle = "Porcentaje entre 0.71 y 0.73"
  ) +  
  theme_minimal() +
  theme(
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 9),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.text.x = element_text(angle = 80, size = 7),
    strip.text = element_text(face = "bold", size = 4.5),
    plot.title = element_text(face = "bold", hjust = 0.5, margin = margin(b = 10)),
    panel.grid = element_blank()
  )

# Gráfica para el porcentaje > 0.73
grafica_mas73 <- 
  ggplot(tabla_pg4_censoxvotos |>  
           filter(tipos_ccaa == "Porc > 0.73")) +
  geom_line(aes(x = fecha, y = porc, color = comunidad_autonoma), size = 1, alpha = 0.8) +  
  scale_x_date(
    breaks = as.Date(c("2008-01-01", "2011-01-01", "2015-01-01", "2016-01-01", "2018-01-01", "2019-01-01")),
    labels = c("2008", "2011", "2015", "2016", "2018", "2019")  
  ) +
  scale_y_continuous(
    labels = function(porc) paste0(porc * 100, "%")        
  ) +
  scale_color_viridis_d() +  
  labs(
    color = "Porcentaje de voto",
    subtitle = "Porcentaje > 0.73"
  ) +  
  theme_minimal() +
  theme(
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 9),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.text.x = element_text(angle = 80, size = 7),
    strip.text = element_text(face = "bold", size = 4.5),
    plot.title = element_text(face = "bold", hjust = 0.5, margin = margin(b = 10)),
    panel.grid = element_blank()
  )

grid.arrange(grafica_menos65, grafica_menos71, grafica_menos73, grafica_mas73, ncol = 2, nrow = 2, top = "Porcentaje de voto por comunidad")

#Se observan disparidades en la participación electoral por comunidad autónoma, con Ceuta y Melilla (\<60 %) en el nivel más bajo y comunidades como La Rioja y País Vasco (\> 70%) en el más alto.

#Las regiones con menor participación muestran cierta recuperación hacia 2018, mientras que las comunidades con alta participación mantienen estabilidad a lo largo del tiempo.
```


---


## Parte 3: ¿Es cierto que determinados partidos ganan en las zonas rurales?

```{r}
tabla_maestra <- tabla_maestra |> 
  mutate(zona = case_when(
    censo < 10000 ~ "rural",  
    TRUE ~ "urbano"
  ))
# Análisis de partidos ganadores en zonas rurales
datos_rurales <- 
  tabla_maestra |>  
  filter(zona == "rural") |>  
  slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |>  
  distinct(anno, mes, municipio, cod_poblacion, siglas) |>  
  group_by(anno, mes) |>  
  count(siglas) |>  
  ungroup() |>  
  mutate(
    siglas = factor(siglas, levels = unique(siglas)),  
    eleccion = case_when(
      anno == 2008 ~ "2008",
      anno == 2011 ~ "2011",
      anno == 2015 ~ "2015",
      anno == 2016 ~ "2016",
      anno == 2019 & mes == "04" ~ "2019 (abril)",
      anno == 2019 & mes == "11" ~ "2019 (noviembre)"
    )
  )

datos_rurales |> 
  ggplot(aes(x = reorder(siglas, -n), y = n, fill = siglas)) +  
  geom_bar(stat = "identity") +  
  scale_fill_manual(values = c("OTRO" = "grey45", "PP" = "#17589d", "PNV" = "#308444", 
                               "PODEMOS-IU" = "#6b1f5f","VOX" = "#5ac035", 
                               "PSOE" = "#c20e1a", "ERC" = "#fcc34e", "BNG" = "#76b3dd",
                               "C's" = "#fb5000")) +  
  labs(
    title = "Partidos Ganadores en Zonas Rurales",
    x = "Partido",
    y = "Número de Municipios Rurales Ganados",
    fill = "Partido"
  ) +
  theme_minimal() +  
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  
  theme(legend.position = "none")

## Se observa como el PP es el partido dominante en las zonas rurales
```
```{r}
# Crear la tabla con el número de municipios ganados por cada partido
tabla_partidos_rurales <- datos_rurales |> 
  group_by(siglas) |> 
  summarise(municipios_ganados = sum(n)) |> 
  arrange(desc(municipios_ganados)) |> 
  mutate(mensaje = glue("{siglas} ganó en {municipios_ganados} municipios rurales"))
tabla_partidos_rurales

```


```{r}
# Partidos ganadores en zonas rurales por año
datos_rurales |> 
  ggplot(aes(x = reorder(siglas, -n), y = n, fill = siglas)) +  
  geom_bar(stat = "identity") +  
  scale_fill_manual(values = c("OTRO" = "grey45", "PP" = "#17589d", "PNV" = "#308444", 
                               "PODEMOS-IU" = "#6b1f5f", "VOX" = "#5ac035", 
                               "PSOE" = "#c20e1a", "ERC" = "#fcc34e", "BNG" = "#76b3dd",
                               "C's" = "#fb5000")) +  
  labs(
    title = "Partidos Ganadores en Zonas Rurales por Año",
    x = "Partido",
    y = "Número de Municipios Rurales Ganados",
    fill = "Partido"
  ) +
  facet_wrap(~ eleccion) +  
  theme_minimal() +  
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  
  theme(legend.position = "none")

```


---


