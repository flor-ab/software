)
)
))
str_c()
#|eval: false
names(election_data)
#Convertir a tidy data
eleccion_tidy <- election_data |> pivot_longer(cols = c(16:471), names_to = "partido", values_to = "votos", values_drop_na = TRUE)
str_detect(string = "CIUDADANOS-PARTIDO DE LA CIUDADANIA", pattern = "\\bUNIDAS PODEMOS|UNIDOS PODEMOS|POEMOS|IU|PODEM|EZKER BATUA\\b"")
""
str_detect("CIUDADANOS-PARTIDO DE LA CIUDADANIA", "\\bUNIDAS PODEMOS|UNIDOS PODEMOS|POEMOS|IU|PODEM|EZKER BATUA\\b")
str_detect("CIUDADANOS-PARTIDO DE LA CIUDADANIA", "\\bUNIDAS PODEMOS\\b|\\bUNIDOS PODEMOS\\b|\\bPODEMOS\\b|\\bIU\\b|\\bPODEM\\b|\\bEZKER BATUA\\b")
cambia_nombres <- function(partido, nombres) {
partido_min <- str_to_lower(partido)
nombres_min <- str_to_lower(nombres)
if (str_detect(partido_min, "\\bsortu\\b|\\beusko alkartasuna\\b|\\baralar\\b|\\balternatiba\\b|\\beuskal herria bildu\\b")) { #Añado el nombre completo de EH - Bildu y cambio a str_detect porque antes no captaba todo lo que debía (ej 2008, Victoria-Gasteiz EZKER BATUA-BERDEAK-ALTERNATIVA)
return("EH - BILDU")
}
if (str_detect(partido_min, "\\bunidas podemos\\b|\\bunidos podemos\\b|\\bpodemos\\b|\\biu\\b|\\bpodem\\b|\\bezker batua\\b")) {
return("UNIDAS PODEMOS - IU")
}
if (str_detect(partido_min,"\\bpartido nacionalista vasco\\b")) {
return("PARTIDO NACIONALISTA VASCO")
}
if (str_detect(partido_min,"\\bpsoe\\b|\\bpartido socialista obrero español\\b")) {
return("PARTIDO SOCIALISTA OBRERO ESPAÑOL")
}
if (str_detect(partido_min,"\\bpp\\b|\\bpartido popular\\b")) {
return("PARTIDO POPULAR")
}
if (str_detect(partido_min,"\\bbloque nacionalista galego\\b")) {
return("BLOQUE NACIONALISTA GALLEGO")
}
if (str_detect(partido_min,"\\bpartido de la ciudadania\\b")) {
return("CIUDADANOS")
}
if (str_detect(partido_min,"\\besquerra republicana de catalunya\\b")) { #Nótese que quedan aún partidos tipo coalición (considero que deberían incluirse)
return("ESQUERRA REPUBLICANA DE CATALUNYA")
}
if (any(partido_min == nombres_min)) {
return(partido)
}
return("OTRO")
}
cambia_nombres("CIUDADANOS-PARTIDO DE LA CIUDADANIA", nombres_partidos)
#Aplicar función al dataframe
eleccion_tidy_filt <- eleccion_tidy |> rowwise() |> mutate(partido_n = cambia_nombres(partido, nombres_partidos))
#Reagrupar partido "otro"
eleccion_resumen <- eleccion_tidy_filt |>
group_by(partido_n,anno,mes,codigo_ccaa,codigo_provincia,codigo_municipio) |>
mutate(votos_totales_partido = sum(votos)) |>
ungroup() # Ver anotaciones del cambio
View(eleccion_resumen)
tabla_maestra <-
eleccion_resumen |>
unite(col = "cod_poblacion", codigo_ccaa, codigo_provincia, codigo_municipio, sep = "-", remove = FALSE) |>
left_join(cod_mun, by =  c("cod_poblacion" = "cod_mun")) |>
mutate(siglas = case_when(
partido_n == "PARTIDO SOCIALISTA OBRERO ESPAÑOL" ~ "PSOE",
partido_n == "PARTIDO POPULAR" ~ "PP",
partido_n == "CIUDADANOS" ~ "C's",
partido_n == "BLOQUE NACIONALISTA GALLEGO" ~ "BNG",
partido_n == "ESQUERRA REPUBLICANA DE CATALUNYA" ~ "ERC",
partido_n == "UNIDAS PODEMOS - IU" ~ "PODEMOS-IU",
partido_n == "EH - BILDU" ~ "EH-BILDU",
partido_n == "PARTIDO NACIONALISTA VASCO" ~ "PNV",
partido_n == "VOX" ~ "VOX",
TRUE ~ "OTRO" ))
datos_p1 <- tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |>  #Quito filas repetidas (partidos resultantes de la agrupación)
group_by(anno, mes) |>
count(siglas) |> #Por elección cuento nº de veces qeu aparece el partido como más votado (=nº de municipios donde ganó)
ungroup() |>
mutate(
siglas = factor(siglas, levels = unique(siglas)), # Aseguramos el orden
eleccion = case_when(
anno == 2008 ~ "2008",
anno == 2011 ~ "2011",
anno == 2015 ~ "2015",
anno == 2016 ~ "2016",
anno == 2019 & mes == "04" ~
"2019 (abril)",
anno == 2019 & mes == "11" ~
"2019 (noviembre)"
)
)
colores_partidos <- c("OTRO" = "grey45", "PP" = "#17589d", "PNV" = "#308444",
"PODEMOS-IU" = "#6b1f5f", "VOX" = "#5ac035",
"PSOE" = "#c20e1a", "ERC" = "#fcc34e", "BNG" = "#76b3dd",
"C's" = "#fb5000")
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(title = "Partidos ganadores en municipios con >100.000 habitantes",
fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size =9),
plot.title = element_text(face = "bold",
hjust = 0.5,
margin = margin(b = 10)))
library(waffle)
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(title = "Partidos ganadores en municipios con >100.000 habitantes",
fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size =9),
plot.title = element_text(face = "bold",
hjust = 0.5,
margin = margin(b = 10)))
tabla_maestra |> filter(censo > 100000) |> slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> distinct(siglas)
tabla_maestra |> slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> distinct(siglas)
tabla_maestra |> filter(censo > 100000) |> distinct(siglas)
View(datos_p1)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |> group_by(anno, mes)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |> group_by(anno, mes) |> count(siglas)
# NO TOQUES NADA
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
rm(list = ls())
library(tidyverse)
library(glue)
library(forcats)
library(lubridate)
library(waffle)
# NO TOQUES NADA
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./data/cod_mun.csv")
surveys <- read_csv(file = "./data/historical_surveys.csv")
abbrev <- read_csv(file = "./data/siglas.csv")
#|eval: false
names(election_data)
#Convertir a tidy data
eleccion_tidy <- election_data |> pivot_longer(cols = c(16:471), names_to = "partido", values_to = "votos", values_drop_na = TRUE)
eleccion_tidy |> distinct(codigo_distrito_electoral) #Sólo está el 0
eleccion_tidy |> distinct(vuelta) #Sólo vuelta 1
eleccion_tidy |> distinct(tipo_eleccion) #Sólo tipo 02 --> nacionales
eleccion_tidy |> distinct(anno, mes) #Hubo 6 elecciones : 2008,2011,2015,2016,2019 (abril) y 2019 (noviembre)
#Depuración nombres de partidos
nombres_partidos <- c("PARTIDO SOCIALISTA OBRERO ESPAÑOL","PARTIDO POPULAR", "CIUDADANOS", "PARTIDO NACIONALISTA VASCO", "BLOQUE NACIONALISTA GALLEGO", "UNIDAS PODEMOS - IU", "ESQUERRA REPUBLICANA DE CATALUNYA",  "EH - BILDU", "VOX")
cambia_nombres <- function(partido, nombres) {
partido_min <- str_to_lower(partido)
nombres_min <- str_to_lower(nombres)
if (str_detect(partido_min, "\\bsortu\\b|\\beusko alkartasuna\\b|\\baralar\\b|\\balternatiba\\b|\\beuskal herria bildu\\b")) { #Añado el nombre completo de EH - Bildu y cambio a str_detect porque antes no captaba todo lo que debía (ej 2008, Victoria-Gasteiz EZKER BATUA-BERDEAK-ALTERNATIVA)
return("EH - BILDU")
}
if (str_detect(partido_min, "\\bunidas podemos\\b|\\bunidos podemos\\b|\\bpodemos\\b|\\biu\\b|\\bpodem\\b|\\bezker batua\\b")) {
return("UNIDAS PODEMOS - IU")
}
if (str_detect(partido_min,"\\bpartido nacionalista vasco\\b")) {
return("PARTIDO NACIONALISTA VASCO")
}
if (str_detect(partido_min,"\\bpsoe\\b|\\bpartido socialista obrero español\\b\\bpartido socialista de euskadi\\b|\\bpartit dels socialistes de catalunya\\b|\\bpartido dos socialistas de galicia\\b")) {
return("PARTIDO SOCIALISTA OBRERO ESPAÑOL")
}
if (str_detect(partido_min,"\\bpp\\b|\\bpartido popular\\b")) {
return("PARTIDO POPULAR")
}
if (str_detect(partido_min,"\\bbloque nacionalista galego\\b")) {
return("BLOQUE NACIONALISTA GALLEGO")
}
if (str_detect(partido_min,"\\bpartido de la ciudadanía\\b|\\bpartido de la ciudadania\\b")) {
return("CIUDADANOS")
}
if (str_detect(partido_min,"\\besquerra republicana de catalunya\\b")) { #Nótese que quedan aún partidos tipo coalición (considero que deberían incluirse)
return("ESQUERRA REPUBLICANA DE CATALUNYA")
}
if (any(partido_min == nombres_min)) {
return(partido)
}
return("OTRO")
}
cambia_nombres("PARTIDO MINERO POPULAR", nombres_partidos) #ejemplo
cambia_nombres("PARTIT POPUPLR-PARTIDO POPULAR", nombres_partidos) #ejemplo
cambia_nombres("CIUDADANOS-PARTIDO DE LA CIUDADANÍA", nombres_partidos) #ver que antes no captaba
#Aplicar función al dataframe
eleccion_tidy_filt <- eleccion_tidy |> rowwise() |> mutate(partido_n = cambia_nombres(partido, nombres_partidos))
#Reagrupar partido "otro"
eleccion_resumen <- eleccion_tidy_filt |>
group_by(partido_n,anno,mes,codigo_ccaa,codigo_provincia,codigo_municipio) |>
mutate(votos_totales_partido = sum(votos)) |>
ungroup() # Ver anotaciones del cambio
eleccion_resumen |> distinct(partido, partido_n)
eleccion_resumen |> distinct(partido, partido_n) |> filter(partido_n)
eleccion_resumen |> distinct(partido, partido_n) |> filter(partido_n == "EH - BILDU")
eleccion_resumen |> count(partido, partido_n) |> filter(partido_n == "EH - BILDU")
eleccion_resumen |> filter(partido %in% c("SORTU", "EUSKO ALKARTASUNA", "ARALAR", "ALTERNATIBA", "EUSKAL HERRIA BILDU"))
eleccion_resumen |> filter(partido %in% c("SORTU", "EUSKO ALKARTASUNA", "ARALAR", "ALTERNATIBA", "EUSKAL HERRIA BILDU")) |> distinct(partido, partido_n)
eleccion_resumen |> filter(partido %in% c("SORTU", "EUSKO ALKARTASUNA", "ARALAR", "ALTERNATIBA", "EUSKAL HERRIA BILDU")) |> distinct(partido)
eleccion_resumen |> filter(partido == "SORTU" |> distinct(partido)
)
eleccion_resumen |> filter(codigo_ccaa)
eleccion_resumen |> filter(codigo_ccaa == 16)
eleccion_resumen |> filter(codigo_ccaa == 16) |> distinct(partido, partido_n)
eleccion_resumen |> filter(codigo_ccaa == 16) |> distinct(partido, partido_n) |> filter(partido == "OTRO")
eleccion_resumen |> filter(codigo_ccaa == 16) |> distinct(partido, partido_n) |> filter(partido_n == "OTRO")
eleccion_resumen |> filter(codigo_ccaa == 16) |> distinct(partido, partido_n) |> filter(partido_n == "OTRO") |> print(n = 26)
#| eval: false
datos_p1 <- tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |>  #Quito filas repetidas (partidos resultantes de la agrupación)
group_by(anno, mes) |>
count(siglas) |> #Por elección cuento nº de veces qeu aparece el partido como más votado (=nº de municipios donde ganó)
ungroup() |>
mutate(
siglas = factor(siglas, levels = unique(siglas)), # Aseguramos el orden
eleccion = case_when(
anno == 2008 ~ "2008",
anno == 2011 ~ "2011",
anno == 2015 ~ "2015",
anno == 2016 ~ "2016",
anno == 2019 & mes == "04" ~
"2019 (abril)",
anno == 2019 & mes == "11" ~
"2019 (noviembre)"
)
)
#| eval: false
# Tabla maestra que contiene nombres de municipios, sus códigos y las siglas de cada partido (para facilitar la visualización)
tabla_maestra <-
eleccion_resumen |>
unite(col = "cod_poblacion", codigo_ccaa, codigo_provincia, codigo_municipio, sep = "-", remove = FALSE) |>
left_join(cod_mun, by =  c("cod_poblacion" = "cod_mun")) |>
mutate(siglas = case_when(
partido_n == "PARTIDO SOCIALISTA OBRERO ESPAÑOL" ~ "PSOE",
partido_n == "PARTIDO POPULAR" ~ "PP",
partido_n == "CIUDADANOS" ~ "C's",
partido_n == "BLOQUE NACIONALISTA GALLEGO" ~ "BNG",
partido_n == "ESQUERRA REPUBLICANA DE CATALUNYA" ~ "ERC",
partido_n == "UNIDAS PODEMOS - IU" ~ "PODEMOS-IU",
partido_n == "EH - BILDU" ~ "EH-BILDU",
partido_n == "PARTIDO NACIONALISTA VASCO" ~ "PNV",
partido_n == "VOX" ~ "VOX",
TRUE ~ "OTRO" ))
#| eval: false
datos_p1 <- tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |>  #Quito filas repetidas (partidos resultantes de la agrupación)
group_by(anno, mes) |>
count(siglas) |> #Por elección cuento nº de veces qeu aparece el partido como más votado (=nº de municipios donde ganó)
ungroup() |>
mutate(
siglas = factor(siglas, levels = unique(siglas)), # Aseguramos el orden
eleccion = case_when(
anno == 2008 ~ "2008",
anno == 2011 ~ "2011",
anno == 2015 ~ "2015",
anno == 2016 ~ "2016",
anno == 2019 & mes == "04" ~
"2019 (abril)",
anno == 2019 & mes == "11" ~
"2019 (noviembre)"
)
)
datos_p1
datos_p1 |> filter(siglas == "EH-BILUD")
datos_p1 |> distinct(siglas)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> filter(codigo_ccaa == "16") |> distinct(ssiglas)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> filter(codigo_ccaa == "16") |> distinct(siglas)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> filter(codigo_ccaa == "16") |> distinct(partido)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "16") |> arrange(desc(votos_totales_partido), .by_group = c(anno, mes))
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "16") |> arrange(desc(votos_totales_partido), .by_group = c(tipo_eleccion))
glimpse(tabla_maestra)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "16") |> grupoarrange(desc(votos_totales_partido))
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "16") |> group_by(anno, mes) |> arrange(desc(votos_totales_partido)) |> ungroup()
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "16") |> group_by(anno, mes) |> arrange(desc(votos_totales_partido)) |> ungroup() |> select(anno, mes, partido, partido_n, votos_totales_partido)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "16") |> group_by(anno, mes, codigo_municipio) |> arrange(desc(votos_totales_partido)) |> ungroup() |> select(anno, mes, partido, partido_n, votos_totales_partido)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "16") |> select(anno, mes, partido, votos_totales_partido, municipio) |> arrange(votos_totales_partido)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "16") |> select(anno, mes, partido, partido_n, votos_totales_partido, municipio) |> arrange(votos_totales_partido) |> distinct(partido_n)
tabla_maestra |> filter(partido_n == "EH - BILDU")
tabla_maestra |> filter(partido_n == "EH - BILDU") |> distinct(codigo_ccaa, anno, mes)
tabla_maestra |> filter(partido_n == "EH - BILDU")
tabla_maestra |> filter(partido_n == "EH - BILDU") |> distinct(municipio)
tabla_maestra |> filter(municipio == "Logroño")
tabla_maestra |> filter(partido_n == "EH - BILDU") |> distinct(codigo_ccaa, anno, mes)
tabla_maestra |> filter(partido_n == "EH - BILDU") |> distinct(municipio)
tabla_maestra |> filter(partido_n == "EH - BILDU") |> distinct(municipio, codigo_ccaa)
View(cod_mun)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "14") |> select(anno, mes, partido, votos_totales_partido, municipio) |> arrange(votos_totales_partido)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "14") |> select(anno, mes, partido, votos_totales_partido, municipio, partido_n) |> count(partido_n)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "14") |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |>  #Quito filas repetidas (partidos resultantes de la agrupación)
group_by(anno, mes) |>
count(siglas) |> #Por elección cuento nº de veces qeu aparece el partido como más votado (=nº de municipios donde ganó)
ungroup()
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "14") |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |>  #Quito filas repetidas (partidos resultantes de la agrupación)
group_by(anno, mes) |>
count(siglas, partido) |> #Por elección cuento nº de veces qeu aparece el partido como más votado (=nº de municipios donde ganó)
ungroup()
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "14") |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas, partido) |>  #Quito filas repetidas (partidos resultantes de la agrupación)
group_by(anno, mes) |>
count(siglas, partido) |> #Por elección cuento nº de veces qeu aparece el partido como más votado (=nº de municipios donde ganó)
ungroup()
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & codigo_ccaa == "14") |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas, partido) |>  #Quito filas repetidas (partidos resultantes de la agrupación)
group_by(anno, mes) |>
count(siglas, partido) |> #Por elección cuento nº de veces qeu aparece el partido como más votado (=nº de municipios donde ganó)
ungroup() |> print(n = 36)
datos_og <- read_excel("C:/Users/jazmi/Downloads/Kuan+et+al.+for+Plos+One+2015.xlsx") |>
janitor::clean_names()
library(readxl)
library(tidyverse)
library(ggsurvfit)
library(survminer)
library(survival)
library(gtsummary)
library(broom.helpers)
library(gt)
library(broom)
library(cardx)
library(powerSurvEpi)
datos_og <- read_excel("C:/Users/jazmi/Downloads/Kuan+et+al.+for+Plos+One+2015.xlsx") |>
janitor::clean_names()
glimpse(datos_og)
View(datos_og)
theme_gtsummary_language("es")
datos_plot |> select(Sexo, Estadio,Localización, `Metilación (t. sano)`, `Metilación de pGST (tumor)`) |> tbl_summary(by = `Metilación (t. sano)`) |> modify_header(label = "**Características iniciales**") |> as_gt() |> tab_options(
table.border.top.color = "black",    # Borde superior
table.border.bottom.color = "black", # Borde inferior
column_labels.border.top.color = "black", # Encabezado superior
column_labels.border.bottom.color = "black", # Encabezado inferior
table_body.hlines.color = "black"    # Líneas horizontales en el cuerpo
) |>
gt::gtsave("tabla1.html")
datos_plot <- datos_og |>
filter(!(survival == 1 & recurrence == 0)) |>
mutate(metastasis = if_else(stage_simple %in% c(1, 2), "No metástasis", "Metástasis"),
metilation =
as.logical(rowSums(across(c(cdkn2a_n, mgmt_n, mlh1_n))) > 0),
metilation_t =
as.logical(rowSums(across(c(cdkn2a_t, mgmt_t, mlh1_t))) > 0),
stage = factor(stage_simple, labels = c("I (no metástasis)", "II (no metástasis)", "III (metástasis)", "IV (metástasis)"), ordered = FALSE),
location = factor(location, labels = c("Ciego", "Colon ascendente", "Colon transverso", "Colon descendente", "Colon sigmoide", "Recto"), ordered = FALSE),
chem_t = factor(chem_t, ordered = FALSE),
sex = factor(sex, levels = c(1,2), labels = c("Hombre", "Mujer"))) |>
mutate(combined = case_when(
metilation == TRUE & metastasis == "Metástasis" ~ "Met/Metástasis",
metilation == TRUE & metastasis == "No metástasis" ~ "Met/No metástasis",
metilation == FALSE & metastasis == "Metástasis" ~ "No met/Metástasis",
metilation == FALSE & metastasis == "No metástasis" ~ "No met/No metástasis"),
metilation = if_else(metilation == TRUE, "pGST metilado/s (t. sano)", "pGST no metilados (t. sano)"),
metilation_t = if_else(metilation_t == TRUE, "pGST metilado/s (tumor)", "pGST no metilados (tumor)"),
chem_t = factor(if_else(chem_t == 0, "Ausente", "Presente")),
censorship = 1 - recurrence) |>
select(serial_no, sex, censorship, metilation, metilation_t, metastasis, follow_up_month, location, cdkn2a_n, mgmt_n, mlh1_n, stage, cdkn2a_t, mlh1_t, mgmt_t, combined, recurrence) |>
drop_na()
names(datos_plot) <- c("ID", "Sexo", "Censurados", "Metilación (t. sano)", "Metilación de pGST (tumor)", "Metástasis", "Meses en el estudio", "Localización", "Met. en cdkn2a (t. sano)",  "Met. en mgmt (t. sano)",  "Met. en mlh1 (t. sano)", "Estadio",  "Met. en cdkn2a (tumor)",  "Met. en mlh1 (tumor)",  "Met. en mgmt (tumor)", "Combinado", "Recidiva")
datos_plot |> select(Sexo, Estadio,Localización, `Metilación (t. sano)`, `Metilación de pGST (tumor)`) |> tbl_summary() |> modify_header(label = "**Características iniciales**") |> as_gt() |> tab_options(
table.border.top.color = "black",    # Borde superior
table.border.bottom.color = "black", # Borde inferior
column_labels.border.top.color = "black", # Encabezado superior
column_labels.border.bottom.color = "black", # Encabezado inferior
table_body.hlines.color = "black"    # Líneas horizontales en el cuerpo
)
datos_plot |> select(Censurados, `Meses en el estudio`) |> tbl_summary() |> modify_header(label = "**Seguimiento**") |> as_gt() |> tab_options(
table.border.top.color = "black",    # Borde superior
table.border.bottom.color = "black", # Borde inferior
column_labels.border.top.color = "black", # Encabezado superior
column_labels.border.bottom.color = "black", # Encabezado inferior
table_body.hlines.color = "black"    # Líneas horizontales en el cuerpo
)
datos_plot |> select(Sexo, Estadio,Localización, `Metilación (t. sano)`, `Metilación de pGST (tumor)`) |> tbl_summary() |> modify_header(label = "**Características iniciales**") |> as_gt() |> tab_options(
table.border.top.color = "black",    # Borde superior
table.border.bottom.color = "black", # Borde inferior
column_labels.border.top.color = "black", # Encabezado superior
column_labels.border.bottom.color = "black", # Encabezado inferior
table_body.hlines.color = "black"    # Líneas horizontales en el cuerpo
) |>
gt::gtsave("tabla1.html")
webshot2::webshot("tabla1.html", file = "tabla1.png", vwidth = 680, vheight = 800)
datos_plot |> select(Censurados, `Meses en el estudio`) |> tbl_summary() |> modify_header(label = "**Seguimiento**") |> as_gt() |> tab_options(
table.border.top.color = "black",    # Borde superior
table.border.bottom.color = "black", # Borde inferior
column_labels.border.top.color = "black", # Encabezado superior
column_labels.border.bottom.color = "black", # Encabezado inferior
table_body.hlines.color = "black"    # Líneas horizontales en el cuerpo
) |>
gt::gtsave("tabla2.html")
webshot2::webshot("tabla2.html", file = "tabla2.png", vwidth = 680, vheight = 800)
datos_plot |> tbl_cross(
row = `Metilación (t. sano)`,
col = `Metilación (tumor)`,
percent = "cell") |> add_p(test = list(all_categorical()~ "fisher.test")) |> as_gt() |>  gt::gtsave("as.html")
datos_plot |> tbl_cross(
row = `Metilación (t. sano)`,
col = `Metilación (tumor)`,
percent = "cell")
datos_plot <- datos_og |>
filter(!(survival == 1 & recurrence == 0)) |>
mutate(metastasis = if_else(stage_simple %in% c(1, 2), "No metástasis", "Metástasis"),
metilation =
as.logical(rowSums(across(c(cdkn2a_n, mgmt_n, mlh1_n))) > 0),
metilation_t =
as.logical(rowSums(across(c(cdkn2a_t, mgmt_t, mlh1_t))) > 0),
stage = factor(stage_simple, labels = c("I (no metástasis)", "II (no metástasis)", "III (metástasis)", "IV (metástasis)"), ordered = FALSE),
location = factor(location, labels = c("Ciego", "Colon ascendente", "Colon transverso", "Colon descendente", "Colon sigmoide", "Recto"), ordered = FALSE),
chem_t = factor(chem_t, ordered = FALSE),
sex = factor(sex, levels = c(1,2), labels = c("Hombre", "Mujer"))) |>
mutate(combined = case_when(
metilation == TRUE & metastasis == "Metástasis" ~ "Met/Metástasis",
metilation == TRUE & metastasis == "No metástasis" ~ "Met/No metástasis",
metilation == FALSE & metastasis == "Metástasis" ~ "No met/Metástasis",
metilation == FALSE & metastasis == "No metástasis" ~ "No met/No metástasis"),
metilation = if_else(metilation == TRUE, "pGST metilado/s (t. sano)", "pGST no metilados (t. sano)"),
metilation_t = if_else(metilation_t == TRUE, "pGST metilado/s (tumor)", "pGST no metilados (tumor)"),
chem_t = factor(if_else(chem_t == 0, "Ausente", "Presente")),
censorship = 1 - recurrence) |>
select(serial_no, sex, censorship, metilation, metilation_t, metastasis, follow_up_month, location, cdkn2a_n, mgmt_n, mlh1_n, stage, cdkn2a_t, mlh1_t, mgmt_t, combined, recurrence) |>
drop_na()
names(datos_plot) <- c("ID", "Sexo", "Censurados", "Metilación de pGST (t. sano)", "Metilación de pGST (tumor)", "Metástasis", "Meses en el estudio", "Localización", "Met. en cdkn2a (t. sano)",  "Met. en mgmt (t. sano)",  "Met. en mlh1 (t. sano)", "Estadio",  "Met. en cdkn2a (tumor)",  "Met. en mlh1 (tumor)",  "Met. en mgmt (tumor)", "Combinado", "Recidiva")
datos_plot |> select(Sexo, Estadio,Localización, `Metilación (t. sano)`, `Metilación de pGST (tumor)`) |> tbl_summary() |> modify_header(label = "**Características iniciales**") |> as_gt() |> tab_options(
table.border.top.color = "black",    # Borde superior
table.border.bottom.color = "black", # Borde inferior
column_labels.border.top.color = "black", # Encabezado superior
column_labels.border.bottom.color = "black", # Encabezado inferior
table_body.hlines.color = "black"    # Líneas horizontales en el cuerpo
) |>
gt::gtsave("tabla1.html")
datos_plot |> select(Sexo, Estadio,Localización, `Metilación de pGST (t. sano)`, `Metilación de pGST (tumor)`) |> tbl_summary() |> modify_header(label = "**Características iniciales**") |> as_gt() |> tab_options(
table.border.top.color = "black",    # Borde superior
table.border.bottom.color = "black", # Borde inferior
column_labels.border.top.color = "black", # Encabezado superior
column_labels.border.bottom.color = "black", # Encabezado inferior
table_body.hlines.color = "black"    # Líneas horizontales en el cuerpo
) |>
gt::gtsave("tabla1.html")
webshot2::webshot("tabla1.html", file = "tabla1.png", vwidth = 680, vheight = 800)
datos_plot |> select(Censurados, `Meses en el estudio`) |> tbl_summary() |> modify_header(label = "**Seguimiento**") |> as_gt() |> tab_options(
table.border.top.color = "black",    # Borde superior
table.border.bottom.color = "black", # Borde inferior
column_labels.border.top.color = "black", # Encabezado superior
column_labels.border.bottom.color = "black", # Encabezado inferior
table_body.hlines.color = "black"    # Líneas horizontales en el cuerpo
) |>
gt::gtsave("tabla2.html")
webshot2::webshot("tabla2.html", file = "tabla2.png", vwidth = 680, vheight = 800)
datos_plot |> tbl_cross(`Metilación (t. sano)`, `Metilación de pGST (tumor)`)
datos_plot |> tbl_cross(`Metilación de pGST (t. sano)`, `Metilación de pGST (tumor)`)
datos_plot |> tbl_cross(`Metilación de pGST (t. sano)`, `Metilación de pGST (tumor)`, percent = "cell")
datos_plot |> tbl_cross(`Metilación de pGST (t. sano)`, `Metilación de pGST (tumor)`, percent = "cell") |>
modify_header(
all_stat_cols() ~ "**{level}**"  # Aplica negrita a los nombres de las variables
)
datos_plot |> tbl_cross(`Metilación de pGST (t. sano)`, `Metilación de pGST (tumor)`, percent = "cell")|> as_gt() |>  gt::gtsave("as.html")
webshot2::webshot("as.html", file = "as.png", vwidth = 450, vheight = 670)
datos_plot |> select(Recidiva, `Meses en el estudio`) |> tbl_summary() |> modify_header(label = "**Seguimiento**") |> as_gt() |> tab_options(
table.border.top.color = "black",    # Borde superior
table.border.bottom.color = "black", # Borde inferior
column_labels.border.top.color = "black", # Encabezado superior
column_labels.border.bottom.color = "black", # Encabezado inferior
table_body.hlines.color = "black"    # Líneas horizontales en el cuerpo
) |>
gt::gtsave("tabla2.html")
webshot2::webshot("tabla2.html", file = "tabla2.png", vwidth = 680, vheight = 800)
datos_plot |> tbl_cross(`Metilación de pGST (t. sano)`, `Metilación de pGST (tumor)`, percent = "cell")|> as_gt() |> tab_options(
table.border.top.color = "black",    # Borde superior
table.border.bottom.color = "black", # Borde inferior
column_labels.border.top.color = "black", # Encabezado superior
column_labels.border.bottom.color = "black", # Encabezado inferior
table_body.hlines.color = "black"    # Líneas horizontales en el cuerpo
) |>  gt::gtsave("as.html")
webshot2::webshot("as.html", file = "as.png", vwidth = 450, vheight = 670)
