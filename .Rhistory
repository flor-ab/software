theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size = 10)
)
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size = 9)
)
datos_p1 <- tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |>  #Quito filas repetidas (partidos resultantes de la agrupación)
group_by(anno, mes) |>
count(siglas) |> #Por elección cuento nº de veces qeu aparece el partido como más votado (=nº de municipios donde ganó)
ungroup() |>
mutate(
siglas = factor(siglas, levels = unique(siglas)), # Aseguramos el orden
eleccion = case_when(
anno == 2008 ~ "2008",
anno == 2011 ~ "2011",
anno == 2015 ~ "2015",
anno == 2016 ~ "2016",
anno == 2019 & mes == "04" ~
"2019
(abril)",
anno == 2019 & mes == "11" ~
"2019
(noviembre)"
)
)
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size = 9)
)
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size =9)
)
datos_p1 <- tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |>  #Quito filas repetidas (partidos resultantes de la agrupación)
group_by(anno, mes) |>
count(siglas) |> #Por elección cuento nº de veces qeu aparece el partido como más votado (=nº de municipios donde ganó)
ungroup() |>
mutate(
siglas = factor(siglas, levels = unique(siglas)), # Aseguramos el orden
eleccion = case_when(
anno == 2008 ~ "2008",
anno == 2011 ~ "2011",
anno == 2015 ~ "2015",
anno == 2016 ~ "2016",
anno == 2019 & mes == "04" ~
"2019 (abril)",
anno == 2019 & mes == "11" ~
"2019 (noviembre)"
)
) |>
arrange(anno, mes)
datos_p1 <- tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |>  #Quito filas repetidas (partidos resultantes de la agrupación)
group_by(anno, mes) |>
count(siglas) |> #Por elección cuento nº de veces qeu aparece el partido como más votado (=nº de municipios donde ganó)
ungroup() |>
mutate(
siglas = factor(siglas, levels = unique(siglas)), # Aseguramos el orden
eleccion = case_when(
anno == 2008 ~ "2008",
anno == 2011 ~ "2011",
anno == 2015 ~ "2015",
anno == 2016 ~ "2016",
anno == 2019 & mes == "04" ~
"2019 (abril)",
anno == 2019 & mes == "11" ~
"2019 (noviembre)"
)
)
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size =9)
)
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(title = "Partidos ganadores en municipios con >100.000 habitantes",
fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size =9)
)
?theme
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(title = "Partidos ganadores en municipios con >100.000 habitantes",
fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size =9),
plot.title.position = "plot"
)
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(title = "Partidos ganadores en municipios con >100.000 habitantes",
fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size =9),
plot.title.position = "panel"
)
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(title = "Partidos ganadores en municipios con >100.000 habitantes",
fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size =9),
plot.title = element_text(hjust = 0.5)
)
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(title = "Partidos ganadores en municipios con >100.000 habitantes",
fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size =9),
plot.title = element_text(hjust = 0.5,
margin = margin(b = 10))
)
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(title = "Partidos ganadores en municipios con >100.000 habitantes",
fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size =9),
plot.title = element_text(face = "bold",
hjust = 0.5,
margin = margin(b = 10))
)
tabla_maestra |> filter(censo > 100000 & anno == 2019 & mes == 04) |> slice_max(votos_totales_partido, by = c(cod_poblacion)) |> count(siglas == "PODEMOS-IU")
library(tidyverse)
tabla_maestra |> filter(censo > 100000 & anno == 2019 & mes == 04) |> slice_max(votos_totales_partido, by = c(cod_poblacion)) |> count(siglas == "PODEMOS-IU")
tabla_maestra |> filter(censo > 100000 & anno == 2019 & mes == 04) |> slice_max(votos_totales_partido, by = c(cod_poblacion)) |> distinct(siglas)
tabla_maestra |> filter(censo > 100000 & anno == 2019 & mes == 04) |> slice_max(votos_totales_partido, by = c(cod_poblacion))
tabla_maestra |> filter(censo > 100000 & anno == 2019 & mes == 04)
tabla_maestra
tabla_maestra |> filter(censo > 100000 & anno == 2019)
tabla_maestra |> filter(censo > 100000 & anno == 2019) |> distinct(mes)
tabla_maestra |> filter(censo > 100000 & anno == 2019 & mes == "04") |> slice_max(votos_totales_partido, by = c(cod_poblacion)) |> count(siglas)
tabla_maestra |> filter(censo > 100000 & anno == 2019 & mes == "04") |> slice_max(votos_totales_partido, by = c(cod_poblacion)) |> distinct(anno, mes, municipio, cod_poblacion, siglas) |> count(siglas)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion))
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> select(anno, mes, partido, partido_n)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> select(anno, mes, partido, cod_poblacion, partido_n)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> filter(partido_n == "UNIDAS PODEMOS - IU") |> select(anno, mes, partido, cod_poblacion, partido_n)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> filter(municipio == "bARCELONA") |> select(anno, mes, partido, cod_poblacion, partido_n)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> filter(municipio == "Barcelona") |> select(anno, mes, partido, cod_poblacion, partido_n)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> filter(municipio == "Barcelona") |> distinct(siglas)
tabla_maestra |> filter(municipio == "Barcelona") |> distinct(cod_poblacion)
tabla_maestra |> #Una fila por municipio
+     filter(censo > 100000) |> #Condición del censo
+     slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> filter(municipio == "Barcelona")
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> filter(municipio == "Barcelona")
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> filter(municipio == "Barcelona") |> distinct()
tabla_maestra |> #Una fila por municipio
filter(censo > 100000 & anno == 2019 & mes == "04") |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> filter(municipio == "Barcelona") |> select(partido, partido_n)
tabla_maestra |> filter(str_detect(partido, "unidas podemos|unidos podemos|podemos|iu|podem|ezker batua")) |> distinct(partido)
tabla_maestra |> filter(str_detect(partido, "UNIDAS PODEMOS|UNIDOS PODEMOS|PODEMOS|IU|PODEM|EZKER BATUA")) |> distinct(partido)
tabla_maestra |> filter(str_detect(partido, "UNIDAS PODEMOS|UNIDOS PODEMOS|PODEMOS|IU|PODEM|EZKER BATUA")) |> distinct(partido) |> print(n = 57)
str_detect("Hola amigo mío", "\\bHola\\b")
str_detect("Hola amigo mío. Hola-juan", "\\bHola\\b")
str_detect("amigo mío. Hola-juan", "\\bHola\\b")
str_detect("amigo mío. Hola-juan", "\\bHola amigo\\b")
str_detect("Hola amigo mío. Hola-juan", "\\bHola amigo\\b")
str_detect("Hola mi amigo mío. Hola-juan", "\\bHola amigo\\b")
eleccion_tidy |> filter(str_detect(partdio, "PARTIDO NACIONALISTA VASCO")) |> distinct(partido)
eleccion_tidy |> filter(str_detect(partido, "PARTIDO NACIONALISTA VASCO")) |> distinct(partido)
str_detect("EUZKO ALDERDI JELTZALEA-PARTIDO NACIONALISTA VASCO", "PARTIDO NACIONALISTA VASCO")
str_detect("EUZKO ALDERDI JELTZALEA-PARTIDO NACIONALISTA VASCO", "\\bPARTIDO NACIONALISTA VASCO\\b")
cambia_nombres("PARTIDO MINERO POPULAR", nombres_partidos) #ejemplo
cambia_nombres("PARTIT POPUPLR-PARTIDO POPULAR", nombres_partidos) #ejemplo
cambia_nombres("PARTIDO MINERO POPULAR", nombres_partidos) #ejemplo
cambia_nombres("PARTIT POPUPLR-PARTIDO POPULAR", nombres_partidos) #ejemplo
# NO TOQUES NADA
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./data/cod_mun.csv")
surveys <- read_csv(file = "./data/historical_surveys.csv")
abbrev <- read_csv(file = "./data/siglas.csv")
eleccion_tidy <- election_data |> pivot_longer(cols = c(16:471), names_to = "partido", values_to = "votos", values_drop_na = TRUE)
eleccion_tidy |> distinct(codigo_distrito_electoral) #Sólo está el 0
eleccion_tidy |> distinct(vuelta) #Sólo vuelta 1
eleccion_tidy |> distinct(tipo_eleccion) #Sólo tipo 02 --> nacionales
eleccion_tidy |> distinct(anno, mes) #Hubo 6 elecciones : 2008,2011,2015,2016,2019 (abril) y 2019 (noviembre)
#Depuración nombres de partidos
nombres_partidos <- c("PARTIDO SOCIALISTA OBRERO ESPAÑOL","PARTIDO POPULAR", "CIUDADANOS", "PARTIDO NACIONALISTA VASCO", "BLOQUE NACIONALISTA GALLEGO", "UNIDAS PODEMOS - IU", "ESQUERRA REPUBLICANA DE CATALUNYA",  "EH - BILDU", "VOX")
cambia_nombres <- function(partido, nombres) {
partido_min <- str_to_lower(partido)
nombres_min <- str_to_lower(nombres)
if (str_detect(partido_min, "\\bsortu|eusko alkartasuna|aralar|alternatiba|euskal herria bildu\\b")) { #Añado el nombre completo de EH - Bildu y cambio a str_detect porque antes no captaba todo lo que debía (ej 2008, Victoria-Gasteiz EZKER BATUA-BERDEAK-ALTERNATIVA)
return("EH - BILDU")
}
if (str_detect(partido_min, "\\bunidas podemos|unidos podemos|podemos|iu|podem|ezker batua\\b")) {
return("UNIDAS PODEMOS - IU")
}
if (str_detect(partido_min,"\\bpartido nacionalista vasco\\b")) {
return("PARTIDO NACIONALISTA VASCO")
}
if (str_detect(partido_min,"\\bpsoe|partido socialista obrero español\\b")) {
return("PARTIDO SOCIALISTA OBRERO ESPAÑOL")
}
if (str_detect(partido_min,"\\bpp|partido popular\\b")) {
return("PARTIDO POPULAR")
}
if (str_detect(partido_min,"\\bbloque nacionalista galego\\b")) {
return("BLOQUE NACIONALISTA GALLEGO")
}
if (str_detect(partido_min,"\\bpartido de la ciudadania\\b")) {
return("CIUDADANOS")
}
if (str_detect(partido_min,"\\besquerra republicana de catalunya\\b")) { #Nótese que quedan aún partidos tipo coalición (considero que deberían incluirse)
return("ESQUERRA REPUBLICANA DE CATALUNYA")
}
if (any(partido_min == nombres_min)) {
return(partido)
}
return("OTRO")
}
# NO TOQUES NADA
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./data/cod_mun.csv")
# NO TOQUES NADA
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./data/cod_mun.csv")
surveys <- read_csv(file = "./data/historical_surveys.csv")
abbrev <- read_csv(file = "./data/siglas.csv")
eleccion_tidy <- election_data |> pivot_longer(cols = c(16:471), names_to = "partido", values_to = "votos", values_drop_na = TRUE)
eleccion_tidy |> distinct(codigo_distrito_electoral) #Sólo está el 0
eleccion_tidy |> distinct(vuelta) #Sólo vuelta 1
eleccion_tidy |> distinct(tipo_eleccion) #Sólo tipo 02 --> nacionales
eleccion_tidy |> distinct(anno, mes) #Hubo 6 elecciones : 2008,2011,2015,2016,2019 (abril) y 2019 (noviembre)
eleccion_tidy |> distinct(codigo_distrito_electoral) #Sólo está el 0
eleccion_tidy |> distinct(anno)
eleccion_tidy |> distinct(codigo_distrito_electoral) #Sólo está el 0
eleccion_tidy |> distinct(vuelta) #Sólo vuelta 1
eleccion_tidy |> distinct(tipo_eleccion) #Sólo tipo 02 --> nacionales
eleccion_tidy |> distinct(anno, mes) #
nombres_partidos <- c("PARTIDO SOCIALISTA OBRERO ESPAÑOL","PARTIDO POPULAR", "CIUDADANOS", "PARTIDO NACIONALISTA VASCO", "BLOQUE NACIONALISTA GALLEGO", "UNIDAS PODEMOS - IU", "ESQUERRA REPUBLICANA DE CATALUNYA",  "EH - BILDU", "VOX")
cambia_nombres <- function(partido, nombres) {
partido_min <- str_to_lower(partido)
nombres_min <- str_to_lower(nombres)
if (str_detect(partido_min, "\\bsortu|eusko alkartasuna|aralar|alternatiba|euskal herria bildu\\b")) { #Añado el nombre completo de EH - Bildu y cambio a str_detect porque antes no captaba todo lo que debía (ej 2008, Victoria-Gasteiz EZKER BATUA-BERDEAK-ALTERNATIVA)
return("EH - BILDU")
}
if (str_detect(partido_min, "\\bunidas podemos|unidos podemos|podemos|iu|podem|ezker batua\\b")) {
return("UNIDAS PODEMOS - IU")
}
if (str_detect(partido_min,"\\bpartido nacionalista vasco\\b")) {
return("PARTIDO NACIONALISTA VASCO")
}
if (str_detect(partido_min,"\\bpsoe|partido socialista obrero español\\b")) {
return("PARTIDO SOCIALISTA OBRERO ESPAÑOL")
}
if (str_detect(partido_min,"\\bpp|partido popular\\b")) {
return("PARTIDO POPULAR")
}
if (str_detect(partido_min,"\\bbloque nacionalista galego\\b")) {
return("BLOQUE NACIONALISTA GALLEGO")
}
if (str_detect(partido_min,"\\bpartido de la ciudadania\\b")) {
return("CIUDADANOS")
}
if (str_detect(partido_min,"\\besquerra republicana de catalunya\\b")) { #Nótese que quedan aún partidos tipo coalición (considero que deberían incluirse)
return("ESQUERRA REPUBLICANA DE CATALUNYA")
}
if (any(partido_min == nombres_min)) {
return(partido)
}
return("OTRO")
}
cambia_nombres("PARTIDO MINERO POPULAR", nombres_partidos) #ejemplo
cambia_nombres("PARTIT POPUPLR-PARTIDO POPULAR", nombres_partidos) #ejemplo
#Aplicar función al dataframe
eleccion_tidy_filt <- eleccion_tidy |> rowwise() |> mutate(partido_n = cambia_nombres(partido, nombres_partidos))
#Reagrupar partido "otro"
eleccion_resumen <- eleccion_tidy_filt |>
group_by(partido_n,anno,mes,codigo_ccaa,codigo_provincia,codigo_municipio) |>
mutate(votos_totales_partido = sum(votos)) |>
ungroup() # Ver anotaciones del cambio
View(eleccion_resumen)
str_detect("CIUDADANOS-PARTIDO DE LA CIUDADANIA", "\\bUNIDAS PODEMOS|UNIDOS PODEMOS|POEMOS|IU|PODEM|EZKER BATUA\\b"")
)
)
))
str_c()
#|eval: false
names(election_data)
#Convertir a tidy data
eleccion_tidy <- election_data |> pivot_longer(cols = c(16:471), names_to = "partido", values_to = "votos", values_drop_na = TRUE)
str_detect(string = "CIUDADANOS-PARTIDO DE LA CIUDADANIA", pattern = "\\bUNIDAS PODEMOS|UNIDOS PODEMOS|POEMOS|IU|PODEM|EZKER BATUA\\b"")
""
str_detect("CIUDADANOS-PARTIDO DE LA CIUDADANIA", "\\bUNIDAS PODEMOS|UNIDOS PODEMOS|POEMOS|IU|PODEM|EZKER BATUA\\b")
str_detect("CIUDADANOS-PARTIDO DE LA CIUDADANIA", "\\bUNIDAS PODEMOS\\b|\\bUNIDOS PODEMOS\\b|\\bPODEMOS\\b|\\bIU\\b|\\bPODEM\\b|\\bEZKER BATUA\\b")
cambia_nombres <- function(partido, nombres) {
partido_min <- str_to_lower(partido)
nombres_min <- str_to_lower(nombres)
if (str_detect(partido_min, "\\bsortu\\b|\\beusko alkartasuna\\b|\\baralar\\b|\\balternatiba\\b|\\beuskal herria bildu\\b")) { #Añado el nombre completo de EH - Bildu y cambio a str_detect porque antes no captaba todo lo que debía (ej 2008, Victoria-Gasteiz EZKER BATUA-BERDEAK-ALTERNATIVA)
return("EH - BILDU")
}
if (str_detect(partido_min, "\\bunidas podemos\\b|\\bunidos podemos\\b|\\bpodemos\\b|\\biu\\b|\\bpodem\\b|\\bezker batua\\b")) {
return("UNIDAS PODEMOS - IU")
}
if (str_detect(partido_min,"\\bpartido nacionalista vasco\\b")) {
return("PARTIDO NACIONALISTA VASCO")
}
if (str_detect(partido_min,"\\bpsoe\\b|\\bpartido socialista obrero español\\b")) {
return("PARTIDO SOCIALISTA OBRERO ESPAÑOL")
}
if (str_detect(partido_min,"\\bpp\\b|\\bpartido popular\\b")) {
return("PARTIDO POPULAR")
}
if (str_detect(partido_min,"\\bbloque nacionalista galego\\b")) {
return("BLOQUE NACIONALISTA GALLEGO")
}
if (str_detect(partido_min,"\\bpartido de la ciudadania\\b")) {
return("CIUDADANOS")
}
if (str_detect(partido_min,"\\besquerra republicana de catalunya\\b")) { #Nótese que quedan aún partidos tipo coalición (considero que deberían incluirse)
return("ESQUERRA REPUBLICANA DE CATALUNYA")
}
if (any(partido_min == nombres_min)) {
return(partido)
}
return("OTRO")
}
cambia_nombres("CIUDADANOS-PARTIDO DE LA CIUDADANIA", nombres_partidos)
#Aplicar función al dataframe
eleccion_tidy_filt <- eleccion_tidy |> rowwise() |> mutate(partido_n = cambia_nombres(partido, nombres_partidos))
#Reagrupar partido "otro"
eleccion_resumen <- eleccion_tidy_filt |>
group_by(partido_n,anno,mes,codigo_ccaa,codigo_provincia,codigo_municipio) |>
mutate(votos_totales_partido = sum(votos)) |>
ungroup() # Ver anotaciones del cambio
View(eleccion_resumen)
tabla_maestra <-
eleccion_resumen |>
unite(col = "cod_poblacion", codigo_ccaa, codigo_provincia, codigo_municipio, sep = "-", remove = FALSE) |>
left_join(cod_mun, by =  c("cod_poblacion" = "cod_mun")) |>
mutate(siglas = case_when(
partido_n == "PARTIDO SOCIALISTA OBRERO ESPAÑOL" ~ "PSOE",
partido_n == "PARTIDO POPULAR" ~ "PP",
partido_n == "CIUDADANOS" ~ "C's",
partido_n == "BLOQUE NACIONALISTA GALLEGO" ~ "BNG",
partido_n == "ESQUERRA REPUBLICANA DE CATALUNYA" ~ "ERC",
partido_n == "UNIDAS PODEMOS - IU" ~ "PODEMOS-IU",
partido_n == "EH - BILDU" ~ "EH-BILDU",
partido_n == "PARTIDO NACIONALISTA VASCO" ~ "PNV",
partido_n == "VOX" ~ "VOX",
TRUE ~ "OTRO" ))
datos_p1 <- tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |>  #Quito filas repetidas (partidos resultantes de la agrupación)
group_by(anno, mes) |>
count(siglas) |> #Por elección cuento nº de veces qeu aparece el partido como más votado (=nº de municipios donde ganó)
ungroup() |>
mutate(
siglas = factor(siglas, levels = unique(siglas)), # Aseguramos el orden
eleccion = case_when(
anno == 2008 ~ "2008",
anno == 2011 ~ "2011",
anno == 2015 ~ "2015",
anno == 2016 ~ "2016",
anno == 2019 & mes == "04" ~
"2019 (abril)",
anno == 2019 & mes == "11" ~
"2019 (noviembre)"
)
)
colores_partidos <- c("OTRO" = "grey45", "PP" = "#17589d", "PNV" = "#308444",
"PODEMOS-IU" = "#6b1f5f", "VOX" = "#5ac035",
"PSOE" = "#c20e1a", "ERC" = "#fcc34e", "BNG" = "#76b3dd",
"C's" = "#fb5000")
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(title = "Partidos ganadores en municipios con >100.000 habitantes",
fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size =9),
plot.title = element_text(face = "bold",
hjust = 0.5,
margin = margin(b = 10)))
library(waffle)
ggplot(datos_p1, aes(fill = siglas, values = n)) +
geom_waffle(n_rows = 10) +
facet_grid(~eleccion) +
scale_fill_manual(values = colores_partidos) +
labs(title = "Partidos ganadores en municipios con >100.000 habitantes",
fill = "Partido") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text = element_blank(),
strip.text = element_text(face = "bold",
size =9),
plot.title = element_text(face = "bold",
hjust = 0.5,
margin = margin(b = 10)))
tabla_maestra |> filter(censo > 100000) |> slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> distinct(siglas)
tabla_maestra |> slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> distinct(siglas)
tabla_maestra |> filter(censo > 100000) |> distinct(siglas)
View(datos_p1)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |> group_by(anno, mes)
tabla_maestra |> #Una fila por municipio
filter(censo > 100000) |> #Condición del censo
slice_max(votos_totales_partido, by = c(anno, mes, cod_poblacion)) |> #Partido más votado por elección
distinct(anno, mes, municipio, cod_poblacion, siglas) |> group_by(anno, mes) |> count(siglas)
